#! /bin/sh
### BEGIN INIT INFO
# Provides:          qvmanager
# Required-Start:    $time $network $remote_fs $syslog mysql
# Required-Stop:     $time $network $remote_fs $syslog mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: qvmanager service
# Description:       qvmanager service
#                    
### END INIT INFO

# Author: D Burgess <dburgess@spinifex.com.au>
#
#  to install use:
# insserv -v qvmanager
# 

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="qvmanager service"
NAME=qvmanager
DAEMON=/opt/gopher/bin/qvmanager
PIDFILE=/run/$NAME.pid
#DAEMON_ARGS="--pid-file $PIDFILE -d -r"
SCRIPTNAME=/etc/init.d/$NAME
ININAME=/etc/gopher/qvmanager.ini
#SITECLKSET=/usr/sbin/ntpdate-debian
SITECLKSET=/usr/bin/rdate
# the IP is ntp.optusnet.com.au
SITECLKSETOPT="-4ns 211.31.132.130"
#SITECLKSETOPT="-4ns uk.pool.ntp.org"






# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0
#[ -x "$DAEMON2" ] || exit 0
[ -x "$ININAME" ] || exit 0

# Read Debian configuration variable file if it is present
# Exit if the conf file does not exist
#if [ -r /etc/default/$NAME ]; then
#	. /etc/default/$NAME || exit 0
#else
#	exit 0
#fi


#[ -z "$ENABLE" ] && exit 0

#DAEMON_ARGS="$DAEMON_ARGS $SVN_REPOPATH"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE=1

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
	local pid
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
#	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
#		|| return 1
#	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
#		$DAEMON_ARGS \
#		|| return 2
#	[ -n "$(/bin/pidof "$DAEMON")" ] && return 1;
	start-stop-daemon --start --quiet --name $NAME --exec $DAEMON --test > /dev/null \
		|| return 1
	[ -x "$SITECLKSET" ] && $SITECLKSET $SITECLKSETOPT || true
	start-stop-daemon --start --quiet --name $NAME --exec $DAEMON  > /dev/null \
		|| return 2
	/bin/sleep 2
	pid=$(/bin/pidof "$DAEMON")
	if [ -n "$pid" ]; then
		echo "$pid" > $PIDFILE
	else
		# seems it did not start
		return 2
	fi
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
#  	echo heartbeat >/sys/devices/platform/leds-gpio/leds/guruplug\:green\:health/trigger || true
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	local r
	local pid
	pid=$(/bin/pidof "$DAEMON")
	[ -n "$pid" ] || return 1;
	[ -r "$PIDFILE" ] || return 2;
	if [ "$pid" != "$(cat $PIDFILE)" ]; then
		# pid dont match pidfile
		return 2
	fi
#	kill -s TERM "$pid" || true
#	pid=$(/bin/pidof "$DAEMON")
#	if [ ! -n "$pid" ]; then
#		pid=$(/bin/pidof "$DAEMON2")
#		if [ -n "$pid" ]; then
#			kill -s TERM "$pid" || true
#		fi
#		echo "0" >/sys/devices/platform/leds-gpio/leds/plug\:green\:health/brightness || true
#		return 0;
#	fi
#	return 2;
#	return 0;
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
#	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}
#VERBOSE=1
case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
